kind: remote
metadata:
  name: model-monitoring-stream
  tag: ''
  hash: cfb4d66554c66086892dede15694ed35775645d4
  project: default
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  entry_points:
    consume:
      name: consume
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: event
        type: Dict
        default: ''
      outputs:
      - default: ''
      lineno: 257
    compute_predictions_per_second:
      name: compute_predictions_per_second
      doc: ''
      parameters:
      - name: event
        type: dict
        default: ''
      outputs:
      - default: ''
      lineno: 275
    process_before_kv:
      name: process_before_kv
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: event
        type: dict
        default: ''
      outputs:
      - default: ''
      lineno: 280
    process_before_events_tsdb:
      name: process_before_events_tsdb
      doc: ''
      parameters:
      - name: event
        type: Dict
        default: ''
      outputs:
      - default: ''
      lineno: 289
    process_before_parquet:
      name: process_before_parquet
      doc: ''
      parameters:
      - name: event
        type: dict
        default: ''
      outputs:
      - default: ''
      lineno: 326
    set_none_if_empty:
      name: set_none_if_empty
      doc: ''
      parameters:
      - name: _event
        type: dict
        default: ''
      - name: keys
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 328
    drop_if_exists:
      name: drop_if_exists
      doc: ''
      parameters:
      - name: _event
        type: dict
        default: ''
      - name: keys
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 333
    unpack_if_exists:
      name: unpack_if_exists
      doc: ''
      parameters:
      - name: _event
        type: dict
        default: ''
      - name: keys
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 337
    do:
      name: do
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: event
        type: Dict
        default: ''
      outputs:
      - default: ''
      lineno: 604
    resume_state:
      name: resume_state
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: endpoint_id
        default: ''
      outputs:
      - default: ''
      lineno: 417
    is_valid_or_count:
      name: is_valid_or_count
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: field
        type: str
        default: ''
      - name: dict_path
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 436
    handle_errors:
      name: handle_errors
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: endpoint_id
        default: ''
      - name: event
        default: ''
      outputs:
      - default: ''
        type: bool
      lineno: 442
    enrich_even_details:
      name: enrich_even_details
      doc: ''
      parameters:
      - name: event
        default: ''
      outputs:
      - default: ''
      lineno: 450
    is_valid_input:
      name: is_valid_input
      doc: ''
      parameters:
      - name: field
        default: ''
      - name: dict_path
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 475
    flatten:
      name: flatten
      doc: ''
      parameters:
      - name: event
        type: Dict
        default: ''
      outputs:
      - default: ''
      lineno: 488
    get_endpoint_record:
      name: get_endpoint_record
      doc: ''
      parameters:
      - name: kv_container
        type: str
        default: ''
      - name: kv_path
        type: str
        default: ''
      - name: endpoint_id
        type: str
        default: ''
      outputs:
      - default: ''
      lineno: 619
    init_context:
      name: init_context
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      outputs:
      - default: ''
      lineno: 636
    handler:
      name: handler
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      - name: event
        type: Event
        default: ''
      outputs:
      - default: ''
      lineno: 644
  description: ''
  min_replicas: 1
  max_replicas: 4
  env: []
  base_spec:
    apiVersion: nuclio.io/v1
    kind: Function
    metadata:
      name: model-monitoring-stream
      labels: {}
      annotations:
        nuclio.io/generated_by: function generated from model_monitoring_stream.py
    spec:
      runtime: python:3.6
      handler: model_monitoring_stream:handler
      env: []
      volumes: []
      build:
        commands: []
        noBaseImagesPull: true
        functionSourceCode: 
  source: ''
  build:
    commands: []
    code_origin: https://github.com/Michaelliv/functions.git#957cda5a54bba192adcec1a0bc8a38865cd66e38:model_monitoring_stream.py
  default_handler: handler
  affinity: null
verbose: false
