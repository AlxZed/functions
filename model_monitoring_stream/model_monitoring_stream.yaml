kind: remote
metadata:
  name: model-monitoring-stream
  tag: ''
  hash: 095cc79c7ffeaf837469ec0b03a568ac4a0e1671
  project: default
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  entry_points:
    as_dict:
      name: as_dict
      doc: ''
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
        type: dict
      lineno: 107
    consume:
      name: consume
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: event
        type: Dict
        default: ''
      outputs:
      - default: ''
      lineno: 269
    compute_predictions_per_second:
      name: compute_predictions_per_second
      doc: ''
      parameters:
      - name: event
        type: dict
        default: ''
      outputs:
      - default: ''
      lineno: 287
    process_before_kv:
      name: process_before_kv
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: event
        type: dict
        default: ''
      outputs:
      - default: ''
      lineno: 292
    process_before_events_tsdb:
      name: process_before_events_tsdb
      doc: ''
      parameters:
      - name: event
        type: Dict
        default: ''
      outputs:
      - default: ''
      lineno: 301
    process_before_parquet:
      name: process_before_parquet
      doc: ''
      parameters:
      - name: event
        type: dict
        default: ''
      outputs:
      - default: ''
      lineno: 338
    set_none_if_empty:
      name: set_none_if_empty
      doc: ''
      parameters:
      - name: _event
        type: dict
        default: ''
      - name: keys
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 340
    drop_if_exists:
      name: drop_if_exists
      doc: ''
      parameters:
      - name: _event
        type: dict
        default: ''
      - name: keys
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 345
    unpack_if_exists:
      name: unpack_if_exists
      doc: ''
      parameters:
      - name: _event
        type: dict
        default: ''
      - name: keys
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 349
    do:
      name: do
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: event
        type: Dict
        default: ''
      outputs:
      - default: ''
      lineno: 599
    resume_state:
      name: resume_state
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: endpoint_id
        default: ''
      outputs:
      - default: ''
      lineno: 428
    is_valid_or_count:
      name: is_valid_or_count
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: field
        type: str
        default: ''
      - name: dict_path
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 445
    handle_errors:
      name: handle_errors
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: endpoint_id
        default: ''
      - name: event
        default: ''
      outputs:
      - default: ''
        type: bool
      lineno: 451
    enrich_even_details:
      name: enrich_even_details
      doc: ''
      parameters:
      - name: event
        default: ''
      outputs:
      - default: ''
      lineno: 459
    is_valid_input:
      name: is_valid_input
      doc: ''
      parameters:
      - name: field
        default: ''
      - name: dict_path
        type: List[str]
        default: ''
      outputs:
      - default: ''
      lineno: 484
    flatten:
      name: flatten
      doc: ''
      parameters:
      - name: event
        type: Dict
        default: ''
      outputs:
      - default: ''
      lineno: 497
    get_endpoint_record:
      name: get_endpoint_record
      doc: ''
      parameters:
      - name: path
        type: str
        default: ''
      - name: endpoint_id
        type: str
        default: ''
      outputs:
      - default: ''
      lineno: 614
    init_context:
      name: init_context
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      outputs:
      - default: ''
      lineno: 629
    handler:
      name: handler
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      - name: event
        type: Event
        default: ''
      outputs:
      - default: ''
      lineno: 635
  description: ''
  min_replicas: 1
  max_replicas: 4
  env: []
  base_spec:
    apiVersion: nuclio.io/v1
    kind: Function
    metadata:
      name: model-monitoring-stream
      labels: {}
      annotations:
        nuclio.io/generated_by: function generated from model_monitoring_stream.py
    spec:
      runtime: python:3.6
      handler: model_monitoring_stream:handler
      env: []
      volumes: []
      build:
        commands: []
        noBaseImagesPull: true
        functionSourceCode: 
  source: ''
  build:
    commands: []
    code_origin: https://github.com/Michaelliv/functions.git#14f363a66d33dc5ae66534038fe046274617f1ea:model_monitoring_stream.py
  default_handler: handler
  affinity: null
verbose: false
