kind: job
metadata:
  name: model-monitoring-batch
  tag: ''
  hash: 122eb21df0adbd57bea0d1a2625b8c3d8c6cfd21
  project: default
spec:
  command: ''
  args: []
  image: mlrun/mlrun:0.6.2-rc4
  env: []
  default_handler: handler
  entry_points:
    compute:
      name: compute
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: capping
        default: null
      - name: kld_scaling
        default: 0.0001
      outputs:
      - default: ''
        type: float
      lineno: 93
    yaml_to_histogram:
      name: yaml_to_histogram
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: histogram_yaml
        default: ''
      outputs:
      - default: ''
      lineno: 142
    compute_metrics_over_df:
      name: compute_metrics_over_df
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: base_histogram
        default: ''
      - name: latest_histogram
        default: ''
      outputs:
      - default: ''
      lineno: 159
    compute_drift_from_histograms:
      name: compute_drift_from_histograms
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: base_histogram_yaml
        default: ''
      - name: latest_histogram_yaml
        default: ''
      outputs:
      - default: ''
      lineno: 170
    parquet_to_stats:
      name: parquet_to_stats
      doc: ''
      parameters:
      - name: parquet_path
        type: Path
        default: ''
      outputs:
      - default: ''
      lineno: 234
    run:
      name: run
      doc: ''
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
      lineno: 253
    handler:
      name: handler
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      outputs:
      - default: ''
      lineno: 326
  description: ''
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/Michaelliv/functions.git#469eeac68540a3c576e44a302d91653703495bc2:batch.py
  affinity: null
verbose: false
