kind: job
metadata:
  name: model-monitoring-batch
  tag: ''
  hash: b2e0ddc50f938de471af8849cbf4be4b1fb9decc
  project: default
  categories: []
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  env: []
  default_handler: handler
  entry_points:
    compute:
      name: compute
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: capping
        default: null
      - name: kld_scaling
        default: 0.0001
      outputs:
      - default: ''
        type: float
      lineno: 64
    dict_to_histogram:
      name: dict_to_histogram
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: histogram_dict
        default: ''
      outputs:
      - default: ''
      lineno: 112
    compute_metrics_over_df:
      name: compute_metrics_over_df
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: base_histogram
        default: ''
      - name: latest_histogram
        default: ''
      outputs:
      - default: ''
      lineno: 129
    compute_drift_from_histograms:
      name: compute_drift_from_histograms
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: feature_stats
        default: ''
      - name: current_stats
        default: ''
      outputs:
      - default: ''
      lineno: 140
    post_init:
      name: post_init
      doc: ''
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
      lineno: 268
    run:
      name: run
      doc: ''
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
      lineno: 280
    check_for_drift:
      name: check_for_drift
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: drift_result
        default: ''
      - name: endpoint
        default: ''
      outputs:
      - default: ''
      lineno: 386
    get_last_created_dir:
      name: get_last_created_dir
      doc: ''
      parameters:
      - name: fs
        default: ''
      - name: endpoint_dir
        default: ''
      outputs:
      - default: ''
      lineno: 411
    handler:
      name: handler
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      outputs:
      - default: ''
      lineno: 418
  description: ''
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/Michaelliv/functions.git#854920b1556b18da9ba0614ac73515461d1ecb4a:/home/michaell/projects/functions/model_monitoring_batch/model_monitoring_batch.py
verbose: false
