kind: job
metadata:
  name: evaluate
  tag: ''
  hash: 0690390006e37411e64cd9027f6488498f402e51
  project: ml-handlers
spec:
  command: ''
  args: []
  image: ''
  env: []
  default_handler: evaluate
  entry_points:
    create_class:
      name: create_class
      doc: Create a class from a package.module.class string
      parameters:
      - name: pkg_class
        type: str
        doc: full class location, e.g. "sklearn.model_selection.GroupKFold"
        default: ''
      outputs:
      - default: ''
      lineno: 44
    get_class_fit:
      name: get_class_fit
      doc: generate a model config
      parameters:
      - name: module_pkg_class
        type: str
        doc: str description of model, e.g. `sklearn.ensemble.RandomForestClassifier`
        default: ''
      outputs:
      - default: ''
      lineno: 57
    update_model_config:
      name: update_model_config
      doc: 'generate an sklearn model configuration


        input can be either a "package.module.class" or

        a json file'
      parameters:
      - name: model_pkg
        default: ''
      - name: skparams
        default: ''
      outputs:
      - default: ''
      lineno: 79
    train:
      name: train
      doc: '    '
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      - name: dataset
        type: DataItem
        default: ''
      - name: model_class
        type: str
        default: ''
      - name: label_column
        type: str
        default: label
      - name: model_name
        type: str
        default: trained_model
      - name: test_size
        type: float
        default: 0.2
      - name: artifacts
        type: List[str]
        default: []
      - name: save_format
        type: str
        default: pkl
      outputs:
      - default: ''
      lineno: 192
    evaluate:
      name: evaluate
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      - name: dataset
        type: DataItem
        default: ''
      - name: model_path
        type: str
        default: ''
      - name: artifacts
        type: List[str]
        default: ''
      - name: label_column
        type: str
        default: label
      outputs:
      - default: ''
      lineno: 233
    predict:
      name: predict
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      - name: dataset
        type: DataItem
        default: ''
      - name: model_path
        type: str
        default: ''
      - name: artifacts
        type: List[str]
        default: ''
      - name: label_column
        type: str
        default: null
      outputs:
      - default: ''
      lineno: 253
  description: ''
  build:
    functionSourceCode: 
    commands: []
    code_origin: ./guy_branch/MLhandlers.py
    origin_filename: ./guy_branch/MLhandlers.py
  disable_auto_mount: false
  priority_class_name: igz-workload-medium
  affinity: null
verbose: false
