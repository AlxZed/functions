kind: job
metadata:
  name: azureml-utils
  tag: ''
  hash: c8ac28a6021a9f899d4ef1a79aec02b5c8d4f778
  project: default
  labels:
    author: yonish
  categories:
  - Utilities
  - machine-learning
  - model-training
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  env: []
  default_handler: automl_train
  entry_points:
    init_experiment:
      name: init_experiment
      doc: 'Initialize workspace and experiment in Azure ML. Uses Service

        Principal authentication via environment variables.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: experiment_name
        type: str
        doc: Name of experiment to create in Azure ML.
        default: ''
      outputs:
      - default: ''
        doc: Azure ML Workspace and Experiment.
      lineno: 52
    init_compute:
      name: init_compute
      doc: 'Initialize Azure ML compute target to run experiment. Checks for

        existing compute target and creates new if doesn''t exist.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: cpu_cluster_name
        type: str
        doc: Name of Azure ML compute target. Created if does not exist.
        default: ''
      - name: workspace
        type: Workspace
        doc: Azure Workspace.
        default: null
      - name: vm_size
        type: str
        doc: Azure machine type for compute target.
        default: STANDARD_D2_V2
      - name: max_nodes
        type: int
        doc: Maximum number of concurrent compute targets.
        default: 1
      outputs:
      - default: ''
        doc: Azure ML Compute Target.
        type: ComputeTarget
      lineno: 85
    register_dataset:
      name: register_dataset
      doc: 'Register dataset object (can be also an Iguazio FeatureVector) in Azure
        ML.

        Uploads parquet file to Azure blob storage and registers

        that file as a dataset in Azure ML.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: dataset_name
        type: str
        doc: Name of Azure dataset to register.
        default: ''
      - name: dataset_description
        type: str
        doc: Description of Azure dataset to register.
        default: ''
      - name: data
        type: DataItem
        doc: Iguazio FeatureVector or dataset object to upload. Will drop index before
          uploading when it is a FeatureVector.
        default: ''
      - name: workspace
        type: Workspace
        doc: Azure workspace.
        default: null
      - name: drop_columns
        type: list
        doc: List of columns to drop from uploaded dataset.
        default: null
      - name: create_new_version
        type: bool
        doc: Register Azure dataset as new version. Must be used when modifying dataset
          schema.
        default: false
      outputs:
      - default: ''
        doc: dataset or feature vector
        type: DataItem
      lineno: 125
    download_model:
      name: download_model
      doc: Download trained model from Azure ML to local filesystem.
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: model_name
        type: str
        doc: Name of trained and registered model.
        default: ''
      - name: model_version
        type: int
        doc: Version of model to download.
        default: ''
      - name: workspace
        type: Workspace
        doc: Azure ML Workspace.
        default: null
      - name: target_dir
        type: str
        doc: Target directory to download model.
        default: .
      outputs:
      - default: ''
      lineno: 210
    upload_model:
      name: upload_model
      doc: Upload pre-trained model from local filesystem to Azure ML.
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: model_name
        type: str
        doc: Name of trained and registered model.
        default: ''
      - name: model_path
        type: str
        doc: Path to file on local filesystem.
        default: ''
      - name: workspace
        type: Workspace
        doc: Azure ML Workspace.
        default: null
      - name: model_description
        type: str
        doc: Description of models.
        default: null
      - name: model_tags
        type: dict
        doc: KV pairs of model tags.
        default: null
      outputs:
      - default: ''
      lineno: 235
    submit_training_job:
      name: submit_training_job
      doc: 'Submit training job to Azure AutoML and download trained model

        when completed. Uses previously registered dataset for training.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: experiment
        type: Experiment
        doc: Azure experiment.
        default: ''
      - name: compute_target
        type: ComputeTarget
        doc: Azure compute target.
        default: ''
      - name: register_model_name
        type: str
        doc: Name of model to register in Azure.
        default: ''
      - name: registered_dataset_name
        type: str
        doc: Name of dataset registered in Azure ML.
        default: ''
      - name: label_column_name
        type: str
        doc: Name of target column in dataset.
        default: ''
      - name: automl_settings
        type: str
        doc: JSON string of all Azure AutoML settings.
        default: ''
      - name: training_set
        type: DataItem
        doc: Training set to log with model. For model monitoring integration.
        default: ''
      - name: workspace
        type: Workspace
        doc: Azure workspace.
        default: null
      - name: save_n_models
        type: int
        doc: How many of the top performing models to log.
        default: 3
      - name: show_output
        type: bool
        doc: Displaying Azure logs.
        default: true
      outputs:
      - default: ''
      lineno: 342
    automl_train:
      name: automl_train
      doc: 'Whole training flow for Azure AutoML. Registers dataset/feature vector,

        submits training job to Azure AutoML, and downloads trained model

        when completed.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: training_data_uri
        type: DataItem
        doc: Iguazio FeatureVector or dataset URI to upload. Will drop index before
          uploading when it is a FeatureVector.
        default: ''
      - name: experiment_name
        type: str
        doc: Name of experiment to create in Azure ML.
        default: ''
      - name: cpu_cluster_name
        type: str
        doc: Name of Azure ML compute target. Created if does not exist.
        default: ''
      - name: vm_size
        type: str
        doc: Azure machine type for compute target.
        default: STANDARD_D2_V2
      - name: max_nodes
        type: int
        doc: Maximum number of concurrent compute targets.
        default: 1
      - name: dataset_name
        type: str
        doc: Name of Azure dataset to register.
        default: ''
      - name: dataset_description
        type: str
        doc: Description of Azure dataset to register.
        default: ''
      - name: feature_vector_entity
        doc: Entity (primary key) of feature vector. Dropped when registering dataset
          in Azure.
        default: ''
      - name: drop_columns
        type: list
        doc: List of columns to drop from uploaded dataset. Defaults to feature_vector_entity.
        default: null
      - name: create_new_version
        type: bool
        doc: Register Azure dataset as new version. Must be used when modifying dataset
          schema.
        default: false
      - name: label_column_name
        type: str
        doc: Target column in dataset.
        default: ''
      - name: register_model_name
        type: str
        doc: Name of model to register in Azure.
        default: ''
      - name: save_n_models
        type: int
        doc: How many of the top performing models to log.
        default: 3
      - name: log_azure
        type: bool
        doc: Displaying Azure logs.
        default: true
      - name: automl_settings
        type: str
        doc: JSON string of all Azure AutoML settings.
        default: null
      outputs:
      - default: ''
      lineno: 446
  description: Azure AutoML integration in MLRun, including utils functions for training
    models on Azure AutoML platfrom.
  build:
    functionSourceCode: aW1wb3J0IG9zCmltcG9ydCBqc29uCmltcG9ydCBsb2dnaW5nCmZyb20gdHlwaW5nIGltcG9ydCBUdXBsZSwgTGlzdAoKZnJvbSBtbHJ1biBpbXBvcnQgTUxDbGllbnRDdHgsIERhdGFJdGVtLCBnZXRfZGF0YWl0ZW0KaW1wb3J0IG1scnVuLmZlYXR1cmVfc3RvcmUgYXMgZl9zdG9yZQpmcm9tIG1scnVuLmFwaS5zY2hlbWFzIGltcG9ydCBPYmplY3RLaW5kCmZyb20gbWxydW4uZGF0YXN0b3JlLnRhcmdldHMgaW1wb3J0IGtpbmRfdG9fZHJpdmVyCgpmcm9tIGF6dXJlbWwuY29yZS5hdXRoZW50aWNhdGlvbiBpbXBvcnQgU2VydmljZVByaW5jaXBhbEF1dGhlbnRpY2F0aW9uCmZyb20gYXp1cmVtbC5jb3JlLndvcmtzcGFjZSBpbXBvcnQgV29ya3NwYWNlCmZyb20gYXp1cmVtbC5jb3JlLmV4cGVyaW1lbnQgaW1wb3J0IEV4cGVyaW1lbnQKZnJvbSBhenVyZW1sLmNvcmUuZGF0YXNldCBpbXBvcnQgRGF0YXNldApmcm9tIGF6dXJlbWwuY29yZS5tb2RlbCBpbXBvcnQgTW9kZWwKZnJvbSBhenVyZW1sLmNvcmUuY29tcHV0ZSBpbXBvcnQgQ29tcHV0ZVRhcmdldCwgQW1sQ29tcHV0ZQpmcm9tIGF6dXJlbWwuY29yZS5jb21wdXRlX3RhcmdldCBpbXBvcnQgQ29tcHV0ZVRhcmdldEV4Y2VwdGlvbgpmcm9tIGF6dXJlbWwuY29yZS5zY3JpcHRfcnVuIGltcG9ydCBTY3JpcHRSdW4KCmZyb20gYXp1cmVtbC50cmFpbi5hdXRvbWwgaW1wb3J0IEF1dG9NTENvbmZpZwpmcm9tIGF6dXJlbWwudHJhaW4uYXV0b21sLnJ1biBpbXBvcnQgQXV0b01MUnVuCgoKZGVmIF9sb2FkX3dvcmtzcGFjZShjb250ZXh0OiBNTENsaWVudEN0eCkgLT4gV29ya3NwYWNlOgogICAgIiIiCiAgICBMb2FkaW5nIEF6dXJlTUwgV29ya3NwYWNlIHVzaW5nIEF6dXJlIHNlY3JldHMuCgogICAgOnBhcmFtIGNvbnRleHQ6IE1MUnVuIGNvbnRleHQuCiAgICA6cmV0dXJuczogICAgICAgQXp1cmVNTCBXb3Jrc3BhY2UKICAgICIiIgoKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oIkxvYWRpbmcgQXp1cmVNTCBXb3Jrc3BhY2UiKQogICAgIyBBenVyZSBzZXJ2aWNlIGF1dGhlbnRpY2F0aW9uOgogICAgc2VydmljZV9hdXRoZW50aWNhdGlvbiA9IFNlcnZpY2VQcmluY2lwYWxBdXRoZW50aWNhdGlvbigKICAgICAgICB0ZW5hbnRfaWQ9Y29udGV4dC5nZXRfc2VjcmV0KCJBWlVSRV9URU5BTlRfSUQiKSwKICAgICAgICBzZXJ2aWNlX3ByaW5jaXBhbF9pZD1jb250ZXh0LmdldF9zZWNyZXQoIkFaVVJFX1NFUlZJQ0VfUFJJTkNJUEFMX0lEIiksCiAgICAgICAgc2VydmljZV9wcmluY2lwYWxfcGFzc3dvcmQ9Y29udGV4dC5nZXRfc2VjcmV0KAogICAgICAgICAgICAiQVpVUkVfU0VSVklDRV9QUklOQ0lQQUxfUEFTU1dPUkQiCiAgICAgICAgKSwKICAgICkKCiAgICAjIExvYWRpbmcgQXp1cmUgd29ya3NwYWNlOgogICAgd29ya3NwYWNlID0gV29ya3NwYWNlKAogICAgICAgIHN1YnNjcmlwdGlvbl9pZD1jb250ZXh0LmdldF9zZWNyZXQoIkFaVVJFX1NVQlNDUklQVElPTl9JRCIpLAogICAgICAgIHJlc291cmNlX2dyb3VwPWNvbnRleHQuZ2V0X3NlY3JldCgiQVpVUkVfUkVTT1VSQ0VfR1JPVVAiKSwKICAgICAgICB3b3Jrc3BhY2VfbmFtZT1jb250ZXh0LmdldF9zZWNyZXQoIkFaVVJFX1dPUktTUEFDRV9OQU1FIiksCiAgICAgICAgYXV0aD1zZXJ2aWNlX2F1dGhlbnRpY2F0aW9uLAogICAgKQogICAgcmV0dXJuIHdvcmtzcGFjZQoKCmRlZiBpbml0X2V4cGVyaW1lbnQoCiAgICBjb250ZXh0OiBNTENsaWVudEN0eCwgZXhwZXJpbWVudF9uYW1lOiBzdHIKKSAtPiBUdXBsZVtXb3Jrc3BhY2UsIEV4cGVyaW1lbnRdOgogICAgIiIiCiAgICBJbml0aWFsaXplIHdvcmtzcGFjZSBhbmQgZXhwZXJpbWVudCBpbiBBenVyZSBNTC4gVXNlcyBTZXJ2aWNlCiAgICBQcmluY2lwYWwgYXV0aGVudGljYXRpb24gdmlhIGVudmlyb25tZW50IHZhcmlhYmxlcy4KCiAgICA6cGFyYW0gY29udGV4dDogICAgICAgICBNTFJ1biBjb250ZXh0LgogICAgOnBhcmFtIGV4cGVyaW1lbnRfbmFtZTogTmFtZSBvZiBleHBlcmltZW50IHRvIGNyZWF0ZSBpbiBBenVyZSBNTC4KICAgIDpyZXR1cm5zOiAgICAgICAgICAgICAgIEF6dXJlIE1MIFdvcmtzcGFjZSBhbmQgRXhwZXJpbWVudC4KICAgICIiIgoKICAgICMgSW5pdGlhbGl6ZSBleHBlcmltZW50IHZpYSBTZXJ2aWNlIFByaW5jaXBhbCBBdXRoZW50aWNhdGlvbjoKICAgICMgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvbWFjaGluZS1sZWFybmluZy9ob3ctdG8tc2V0dXAtYXV0aGVudGljYXRpb24jdXNlLXNlcnZpY2UtcHJpbmNpcGFsLWF1dGhlbnRpY2F0aW9uCgogICAgd29ya3NwYWNlID0gX2xvYWRfd29ya3NwYWNlKGNvbnRleHQpCgogICAgY29udGV4dC5sb2dnZXIuaW5mbygiSW5pdGlhbGl6aW5nIEF6dXJlTUwgZXhwZXJpbWVudCIpCiAgICAjIENyZWF0aW5nIGV4cGVyaW1lbnQ6CiAgICBleHBlcmltZW50ID0gRXhwZXJpbWVudCh3b3Jrc3BhY2UsIGV4cGVyaW1lbnRfbmFtZSkKCiAgICAjIFNldCBBenVyZSBzdG9yYWdlIGNvbm5lY3Rpb24gZW52aXJvbm1lbnQgdmFyaWFibGUgZnJvbSBzZWNyZXQ6CiAgICBhc3NlcnQgY29udGV4dC5nZXRfc2VjcmV0KAogICAgICAgICJBWlVSRV9TVE9SQUdFX0NPTk5FQ1RJT05fU1RSSU5HIgogICAgKSwgIkFaVVJFX1NUT1JBR0VfQ09OTkVDVElPTl9TVFJJTkcgc2VjcmV0IG5vdCBzZXQiCgogICAgb3MuZW52aXJvblsiQVpVUkVfU1RPUkFHRV9DT05ORUNUSU9OX1NUUklORyJdID0gY29udGV4dC5nZXRfc2VjcmV0KAogICAgICAgICJBWlVSRV9TVE9SQUdFX0NPTk5FQ1RJT05fU1RSSU5HIgogICAgKQoKICAgIHJldHVybiB3b3Jrc3BhY2UsIGV4cGVyaW1lbnQKCgpkZWYgaW5pdF9jb21wdXRlKAogICAgY29udGV4dDogTUxDbGllbnRDdHgsCiAgICBjcHVfY2x1c3Rlcl9uYW1lOiBzdHIsCiAgICB3b3Jrc3BhY2U6IFdvcmtzcGFjZSA9IE5vbmUsCiAgICB2bV9zaXplOiBzdHIgPSAiU1RBTkRBUkRfRDJfVjIiLAogICAgbWF4X25vZGVzOiBpbnQgPSAxLAopIC0+IENvbXB1dGVUYXJnZXQ6CiAgICAiIiIKICAgIEluaXRpYWxpemUgQXp1cmUgTUwgY29tcHV0ZSB0YXJnZXQgdG8gcnVuIGV4cGVyaW1lbnQuIENoZWNrcyBmb3IKICAgIGV4aXN0aW5nIGNvbXB1dGUgdGFyZ2V0IGFuZCBjcmVhdGVzIG5ldyBpZiBkb2Vzbid0IGV4aXN0LgoKICAgIDpwYXJhbSBjb250ZXh0OiAgICAgICAgICBNTFJ1biBjb250ZXh0LgogICAgOnBhcmFtIGNwdV9jbHVzdGVyX25hbWU6IE5hbWUgb2YgQXp1cmUgTUwgY29tcHV0ZSB0YXJnZXQuIENyZWF0ZWQgaWYgZG9lcyBub3QgZXhpc3QuCiAgICA6cGFyYW0gd29ya3NwYWNlOiAgICAgICAgQXp1cmUgV29ya3NwYWNlLgogICAgOnBhcmFtIHZtX3NpemU6ICAgICAgICAgIEF6dXJlIG1hY2hpbmUgdHlwZSBmb3IgY29tcHV0ZSB0YXJnZXQuCiAgICA6cGFyYW0gbWF4X25vZGVzOiAgICAgICAgTWF4aW11bSBudW1iZXIgb2YgY29uY3VycmVudCBjb21wdXRlIHRhcmdldHMuCiAgICA6cmV0dXJuczogICAgICAgICAgICAgICAgQXp1cmUgTUwgQ29tcHV0ZSBUYXJnZXQuCiAgICAiIiIKICAgICMgTG9hZGluZyB3b3Jrc3BhY2UgaWYgbm90IHByb3ZpZGVkOgogICAgaWYgbm90IHdvcmtzcGFjZToKICAgICAgICB3b3Jrc3BhY2UgPSBfbG9hZF93b3Jrc3BhY2UoY29udGV4dCkKCiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCJJbml0aWFsaXppbmcgQXp1cmVNTCBjb21wdXRlIHRhcmdldCIpCgogICAgIyBWZXJpZnkgdGhhdCBjbHVzdGVyIGRvZXMgbm90IGV4aXN0IGFscmVhZHk6CiAgICB0cnk6CiAgICAgICAgY29tcHV0ZV90YXJnZXQgPSBDb21wdXRlVGFyZ2V0KHdvcmtzcGFjZT13b3Jrc3BhY2UsIG5hbWU9Y3B1X2NsdXN0ZXJfbmFtZSkKICAgICAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCJGb3VuZCBleGlzdGluZyBjbHVzdGVyLCB1c2UgaXQuIikKICAgIGV4Y2VwdCBDb21wdXRlVGFyZ2V0RXhjZXB0aW9uOgogICAgICAgIGNvbXB1dGVfY29uZmlnID0gQW1sQ29tcHV0ZS5wcm92aXNpb25pbmdfY29uZmlndXJhdGlvbigKICAgICAgICAgICAgdm1fc2l6ZT12bV9zaXplLCBtYXhfbm9kZXM9bWF4X25vZGVzCiAgICAgICAgKQogICAgICAgIGNvbXB1dGVfdGFyZ2V0ID0gQ29tcHV0ZVRhcmdldC5jcmVhdGUoCiAgICAgICAgICAgIHdvcmtzcGFjZSwgY3B1X2NsdXN0ZXJfbmFtZSwgY29tcHV0ZV9jb25maWcKICAgICAgICApCgogICAgY29tcHV0ZV90YXJnZXQud2FpdF9mb3JfY29tcGxldGlvbihzaG93X291dHB1dD1UcnVlKQogICAgcmV0dXJuIGNvbXB1dGVfdGFyZ2V0CgoKZGVmIHJlZ2lzdGVyX2RhdGFzZXQoCiAgICBjb250ZXh0OiBNTENsaWVudEN0eCwKICAgIGRhdGFzZXRfbmFtZTogc3RyLAogICAgZGF0YXNldF9kZXNjcmlwdGlvbjogc3RyLAogICAgZGF0YTogRGF0YUl0ZW0sCiAgICB3b3Jrc3BhY2U6IFdvcmtzcGFjZSA9IE5vbmUsCiAgICBkcm9wX2NvbHVtbnM6IGxpc3QgPSBOb25lLAogICAgY3JlYXRlX25ld192ZXJzaW9uOiBib29sID0gRmFsc2UsCikgLT4gRGF0YUl0ZW06CiAgICAiIiIKICAgIFJlZ2lzdGVyIGRhdGFzZXQgb2JqZWN0IChjYW4gYmUgYWxzbyBhbiBJZ3VhemlvIEZlYXR1cmVWZWN0b3IpIGluIEF6dXJlIE1MLgogICAgVXBsb2FkcyBwYXJxdWV0IGZpbGUgdG8gQXp1cmUgYmxvYiBzdG9yYWdlIGFuZCByZWdpc3RlcnMKICAgIHRoYXQgZmlsZSBhcyBhIGRhdGFzZXQgaW4gQXp1cmUgTUwuCgogICAgOnBhcmFtIGNvbnRleHQ6ICAgICAgICAgICAgICAgTUxSdW4gY29udGV4dC4KICAgIDpwYXJhbSB3b3Jrc3BhY2U6ICAgICAgICAgICAgIEF6dXJlIHdvcmtzcGFjZS4KICAgIDpwYXJhbSBkYXRhc2V0X25hbWU6ICAgICAgICAgIE5hbWUgb2YgQXp1cmUgZGF0YXNldCB0byByZWdpc3Rlci4KICAgIDpwYXJhbSBkYXRhc2V0X2Rlc2NyaXB0aW9uOiAgIERlc2NyaXB0aW9uIG9mIEF6dXJlIGRhdGFzZXQgdG8gcmVnaXN0ZXIuCiAgICA6cGFyYW0gZGF0YTogICAgICAgICAgICAgICAgICBJZ3VhemlvIEZlYXR1cmVWZWN0b3Igb3IgZGF0YXNldCBvYmplY3QgdG8gdXBsb2FkLiBXaWxsIGRyb3AKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4IGJlZm9yZSB1cGxvYWRpbmcgd2hlbiBpdCBpcyBhIEZlYXR1cmVWZWN0b3IuCiAgICA6cGFyYW0gZHJvcF9jb2x1bW5zOiAgICAgICAgICBMaXN0IG9mIGNvbHVtbnMgdG8gZHJvcCBmcm9tIHVwbG9hZGVkIGRhdGFzZXQuCiAgICA6cGFyYW0gY3JlYXRlX25ld192ZXJzaW9uOiAgICBSZWdpc3RlciBBenVyZSBkYXRhc2V0IGFzIG5ldyB2ZXJzaW9uLiBNdXN0IGJlIHVzZWQgd2hlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZ5aW5nIGRhdGFzZXQgc2NoZW1hLgoKICAgIDpyZXR1cm5zOiAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXQgb3IgZmVhdHVyZSB2ZWN0b3IKICAgICIiIgoKICAgIGRhdGFfdHlwZSA9IGRhdGEuc3VmZml4CiAgICAjIENvbm5lY3QgdG8gQXp1cmVNTCBleHBlcmltZW50IGFuZCBkYXRhc3RvcmU6CiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCJDb25uZWN0aW5nIHRvIEF6dXJlTUwgZXhwZXJpbWVudCBkZWZhdWx0IGRhdGFzdG9yZSIpCgogICAgIyBMb2FkaW5nIHdvcmtzcGFjZSBpZiBub3QgcHJvdmlkZWQ6CiAgICBpZiBub3Qgd29ya3NwYWNlOgogICAgICAgIHdvcmtzcGFjZSA9IF9sb2FkX3dvcmtzcGFjZShjb250ZXh0KQogICAgZGF0YXN0b3JlID0gd29ya3NwYWNlLmdldF9kZWZhdWx0X2RhdGFzdG9yZSgpCgogICAgIyBBenVyZSBibG9iIHBhdGggKGRlZmF1bHQgZGF0YXN0b3JlIGZvciB3b3Jrc3BhY2UpOgogICAgYmxvYl9wYXRoID0gZiJhejovL3tkYXRhc3RvcmUuY29udGFpbmVyX25hbWV9L3tkYXRhc2V0X25hbWV9e2RhdGFfdHlwZX0iCgogICAgIyBSZXRyaWV2ZSBkYXRhIHNvdXJjZSBhcyBkYXRhZnJhbWU6CiAgICBpZiBkYXRhLm1ldGEgYW5kIGRhdGEubWV0YS5raW5kID09IE9iamVjdEtpbmQuZmVhdHVyZV92ZWN0b3I6CiAgICAgICAgIyBGZWF0dXJlVmVjdG9yIGNhc2U6CiAgICAgICAgY29udGV4dC5sb2dnZXIuaW5mbygKICAgICAgICAgICAgIlJldHJpZXZpbmcgZmVhdHVyZSB2ZWN0b3IgYW5kIHVwbG9hZGluZyB0byBBenVyZSBibG9iIHN0b3JhZ2UiCiAgICAgICAgKQogICAgICAgIHRhcmdldCA9IGtpbmRfdG9fZHJpdmVyW2RhdGFfdHlwZV0ocGF0aD1ibG9iX3BhdGgpCiAgICAgICAgZl9zdG9yZS5nZXRfb2ZmbGluZV9mZWF0dXJlcyhkYXRhLCB0YXJnZXQ9dGFyZ2V0KQogICAgZWxzZToKICAgICAgICAjIERhdGFJdGVtIGNhc2U6CiAgICAgICAgY29udGV4dC5sb2dnZXIuaW5mbygiUmV0cmlldmluZyBkYXRhc2V0IGFuZCB1cGxvYWRpbmcgdG8gQXp1cmUgYmxvYiBzdG9yYWdlIikKICAgICAgICBkYXRhX2luX2J5dGVzID0gZGF0YS5nZXQoKQogICAgICAgIGdldF9kYXRhaXRlbShibG9iX3BhdGgpLnB1dChkYXRhX2luX2J5dGVzKQoKICAgICMgUmVnaXN0ZXIgZGF0YXNldCBpbiBBenVyZU1MOgogICAgY29udGV4dC5sb2dnZXIuaW5mbygiUmVnaXN0ZXJpbmcgZGF0YXNldCBpbiBBenVyZSBNTCIpCiAgICBpZiBkYXRhX3R5cGUgPT0gIi5wYXJxdWV0IjoKICAgICAgICBkYXRhc2V0ID0gRGF0YXNldC5UYWJ1bGFyLmZyb21fcGFycXVldF9maWxlcygKICAgICAgICAgICAgcGF0aD0oZGF0YXN0b3JlLCBmIntkYXRhc2V0X25hbWV9LnBhcnF1ZXQiKSwgdmFsaWRhdGU9RmFsc2UKICAgICAgICApCiAgICBlbHNlOgogICAgICAgIGRhdGFzZXQgPSBEYXRhc2V0LlRhYnVsYXIuZnJvbV9kZWxpbWl0ZWRfZmlsZXMoCiAgICAgICAgICAgIHBhdGg9KGRhdGFzdG9yZSwgZiJ7ZGF0YXNldF9uYW1lfXtkYXRhX3R5cGV9IikKICAgICAgICApCgogICAgaWYgZHJvcF9jb2x1bW5zOgogICAgICAgIGFzc2VydCAoCiAgICAgICAgICAgIHR5cGUoZHJvcF9jb2x1bW5zKSA9PSBsaXN0CiAgICAgICAgKSwgImRyb3BfY29sdW1ucyBtdXN0IGJlIGEgbGlzdCBvZiBjb2x1bW5zIHRvIGRyb3AiCiAgICAgICAgZGF0YXNldCA9IGRhdGFzZXQuZHJvcF9jb2x1bW5zKGRyb3BfY29sdW1ucykKCiAgICBkYXRhc2V0LnJlZ2lzdGVyKAogICAgICAgIHdvcmtzcGFjZT13b3Jrc3BhY2UsCiAgICAgICAgbmFtZT1kYXRhc2V0X25hbWUsCiAgICAgICAgZGVzY3JpcHRpb249ZGF0YXNldF9kZXNjcmlwdGlvbiwKICAgICAgICBjcmVhdGVfbmV3X3ZlcnNpb249Y3JlYXRlX25ld192ZXJzaW9uLAogICAgKQoKICAgICMgT3V0cHV0IHJlZ2lzdGVyZWQgZGF0YXNldCBuYW1lIGluIEF6dXJlOgogICAgY29udGV4dC5sb2dfYXJ0aWZhY3QoInJlZ2lzdGVyZWRfZGF0YXNldF9uYW1lIiwgZGF0YXNldF9uYW1lKQogICAgY29udGV4dC5sb2dfYXJ0aWZhY3QoImJsb2JfcGF0aCIsIGJsb2JfcGF0aCkKCiAgICAjIFJldHVybiBkYXRhIHNvdXJjZToKICAgIHJldHVybiBkYXRhCgoKZGVmIGRvd25sb2FkX21vZGVsKAogICAgY29udGV4dDogTUxDbGllbnRDdHgsCiAgICBtb2RlbF9uYW1lOiBzdHIsCiAgICBtb2RlbF92ZXJzaW9uOiBpbnQsCiAgICB3b3Jrc3BhY2U6IFdvcmtzcGFjZSA9IE5vbmUsCiAgICB0YXJnZXRfZGlyOiBzdHIgPSAiLiIsCikgLT4gTm9uZToKICAgICIiIgogICAgRG93bmxvYWQgdHJhaW5lZCBtb2RlbCBmcm9tIEF6dXJlIE1MIHRvIGxvY2FsIGZpbGVzeXN0ZW0uCgogICAgOnBhcmFtIGNvbnRleHQ6ICAgICAgIE1MUnVuIGNvbnRleHQuCiAgICA6cGFyYW0gd29ya3NwYWNlOiAgICAgQXp1cmUgTUwgV29ya3NwYWNlLgogICAgOnBhcmFtIG1vZGVsX25hbWU6ICAgIE5hbWUgb2YgdHJhaW5lZCBhbmQgcmVnaXN0ZXJlZCBtb2RlbC4KICAgIDpwYXJhbSBtb2RlbF92ZXJzaW9uOiBWZXJzaW9uIG9mIG1vZGVsIHRvIGRvd25sb2FkLgogICAgOnBhcmFtIHRhcmdldF9kaXI6ICAgIFRhcmdldCBkaXJlY3RvcnkgdG8gZG93bmxvYWQgbW9kZWwuCiAgICAiIiIKICAgICMgTG9hZGluZyB3b3Jrc3BhY2UgaWYgbm90IHByb3ZpZGVkOgogICAgaWYgbm90IHdvcmtzcGFjZToKICAgICAgICB3b3Jrc3BhY2UgPSBfbG9hZF93b3Jrc3BhY2UoY29udGV4dCkKCiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCJEb3dubG9hZGluZyBtb2RlbCIpCiAgICBtb2RlbCA9IE1vZGVsKHdvcmtzcGFjZSwgbW9kZWxfbmFtZSwgdmVyc2lvbj1tb2RlbF92ZXJzaW9uKQogICAgbW9kZWwuZG93bmxvYWQodGFyZ2V0X2Rpcj10YXJnZXRfZGlyLCBleGlzdF9vaz1UcnVlKQoKCmRlZiB1cGxvYWRfbW9kZWwoCiAgICBjb250ZXh0OiBNTENsaWVudEN0eCwKICAgIG1vZGVsX25hbWU6IHN0ciwKICAgIG1vZGVsX3BhdGg6IHN0ciwKICAgIHdvcmtzcGFjZTogV29ya3NwYWNlID0gTm9uZSwKICAgIG1vZGVsX2Rlc2NyaXB0aW9uOiBzdHIgPSBOb25lLAogICAgbW9kZWxfdGFnczogZGljdCA9IE5vbmUsCikgLT4gTm9uZToKICAgICIiIgogICAgVXBsb2FkIHByZS10cmFpbmVkIG1vZGVsIGZyb20gbG9jYWwgZmlsZXN5c3RlbSB0byBBenVyZSBNTC4KICAgIDpwYXJhbSBjb250ZXh0OiAgICAgICAgICAgTUxSdW4gY29udGV4dC4KICAgIDpwYXJhbSB3b3Jrc3BhY2U6ICAgICAgICAgQXp1cmUgTUwgV29ya3NwYWNlLgogICAgOnBhcmFtIG1vZGVsX25hbWU6ICAgICAgICBOYW1lIG9mIHRyYWluZWQgYW5kIHJlZ2lzdGVyZWQgbW9kZWwuCiAgICA6cGFyYW0gbW9kZWxfcGF0aDogICAgICAgIFBhdGggdG8gZmlsZSBvbiBsb2NhbCBmaWxlc3lzdGVtLgogICAgOnBhcmFtIG1vZGVsX2Rlc2NyaXB0aW9uOiBEZXNjcmlwdGlvbiBvZiBtb2RlbHMuCiAgICA6cGFyYW0gbW9kZWxfdGFnczogICAgICAgIEtWIHBhaXJzIG9mIG1vZGVsIHRhZ3MuCiAgICAiIiIKICAgICMgTG9hZGluZyB3b3Jrc3BhY2UgaWYgbm90IHByb3ZpZGVkOgogICAgaWYgbm90IHdvcmtzcGFjZToKICAgICAgICB3b3Jrc3BhY2UgPSBfbG9hZF93b3Jrc3BhY2UoY29udGV4dCkKCiAgICBNb2RlbC5yZWdpc3RlcigKICAgICAgICB3b3Jrc3BhY2U9d29ya3NwYWNlLAogICAgICAgIG1vZGVsX3BhdGg9bW9kZWxfcGF0aCwKICAgICAgICBtb2RlbF9uYW1lPW1vZGVsX25hbWUsCiAgICAgICAgZGVzY3JpcHRpb249bW9kZWxfZGVzY3JpcHRpb24sCiAgICAgICAgdGFncz1tb2RlbF90YWdzLAogICAgKQoKCmRlZiBfZ2V0X3RvcF9uX3J1bnMoCiAgICByZW1vdGVfcnVuOiBBdXRvTUxSdW4sIG46IGludCA9IDUsIHByaW1hcnlfbWV0cmljOiBzdHIgPSAiYWNjdXJhY3kiCikgLT4gTGlzdFtTY3JpcHRSdW5dOgogICAgIiIiCiAgICBHZXQgdG9wIE4gY29tcGxldGUgcnVucyBmcm9tIGV4cGVyaW1lbnQgc29ydGVkIGJ5IHByaW1hcnkgbWV0cmljLgoKICAgIDpwYXJhbSByZW1vdGVfcnVuOiAgICAgQXp1cmUgTUwgUnVuLgogICAgOnBhcmFtIG46ICAgICAgICAgICAgICBOdW1iZXIgb2YgdG9wIHJ1bnMgdG8gcmV0dXJuLgogICAgOnBhcmFtIHByaW1hcnlfbWV0cmljOiBNZXRyaWMgdG8gc29ydCBieS4KCiAgICA6cmV0dXJuczogICAgICAgICAgICAgIExpc3Qgb2YgdG9wIE4gcnVucyBzb3J0ZWQgYnkgcHJpbWFyeSBtZXRyaWMuCiAgICAiIiIKICAgICMgQ29sbGVjdCBhbGwgbW9kZWxzOgogICAgY29tcGxldGVfcnVucyA9IFsKICAgICAgICBydW4KICAgICAgICBmb3IgcnVuIGluIHJlbW90ZV9ydW4uZ2V0X2NoaWxkcmVuKHN0YXR1cz0iQ29tcGxldGVkIikKICAgICAgICBpZiAic2V0dXAiIG5vdCBpbiBydW4uaWQKICAgIF0KCiAgICAjIENoZWNraW5nIHRoYXQgdGhlIHJlcXVpcmVkIG51bWJlciBvZiBydW5zIGFyZSBkb25lOgogICAgaWYgbGVuKGNvbXBsZXRlX3J1bnMpIDwgbjoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGYiRXhwZWN0ZWQge259IHJ1bnMgYnV0IG9ubHkgcmVjZWl2ZWQge2xlbihjb21wbGV0ZV9ydW5zKX0iKQoKICAgICMgU29ydGluZyBieSB0aGUgcHJpbWFyeSBtZXRyaWM6CiAgICBzb3J0ZWRfcnVucyA9IHNvcnRlZCgKICAgICAgICBjb21wbGV0ZV9ydW5zLCBrZXk9bGFtYmRhIHJ1bjogcnVuLmdldF9tZXRyaWNzKClbcHJpbWFyeV9tZXRyaWNdLCByZXZlcnNlPVRydWUKICAgICkKICAgIHJldHVybiBzb3J0ZWRfcnVuc1s6bl0KCgpkZWYgX2dldF9tb2RlbF9ocCgKICAgIHJ1bjogU2NyaXB0UnVuLAopIC0+IGRpY3Q6CiAgICAiIiIKICAgIEdldCBoeXBlci1wYXJhbWV0ZXJzIG9mIHRyYWluZWQgQXp1cmVNTCBtb2RlbC4KICAgIENvbWJpbmUgdGhlIGh5cGVyLXBhcmFtZXRlcnMgb2YgdGhlIGRhdGEgdHJhbnNmb3JtYXRpb24gYW5kIHRyYWluaW5nIHRvIGEgZGljdGlvbmFyeS4KICAgIFRoZSBwcmVmaXggb2YgdGhlIGRpY3Rpb25hcnkga2V5cyBjb3JyZXNwb25kcyB0byAnZGF0YSB0cmFuc2Zvcm1hdGlvbicgYW5kICd0cmFpbmluZycuCgogICAgOnBhcmFtIHJ1bjogUnVuIG9iamVjdCBvZiBBenVyZU1MIHRyYWluZWQgbW9kZWwuCgogICAgOnJldHVybnM6ICAgIEEgZGljdGlvbmFyeSBhcyBkZXNjcmliZWQgaW4gdGhlIGRvY3N0cmluZy4KICAgICIiIgoKICAgIGhwX2ZpZWxkID0gInBpcGVsaW5lX3NwZWMiCiAgICBpZiBocF9maWVsZCBub3QgaW4gcnVuLnByb3BlcnRpZXM6CiAgICAgICAgcmV0dXJuIHt9CiAgICBocF9zdHJpbmcgPSBydW4ucHJvcGVydGllc1tocF9maWVsZF0KCiAgICAjIENyZWF0aW5nIHRlbXAganNvbiBmaWxlIGJlY2F1c2UgYXN0LmxpdGVyYWxfZXZhbCBmYWlsczoKICAgIGZpbGVuYW1lID0gImhwX3RtcC5qc29uIgogICAgdG1wX2ZpbGUgPSBvcGVuKAogICAgICAgIGYiLi97ZmlsZW5hbWV9IiwKICAgICkKICAgICMgV3JpdGluZyBjb21wbGV4IGRpY3QgdG8gZmlsZToKICAgIHRtcF9maWxlLndyaXRlKGhwX3N0cmluZykKICAgICMgQ3JlYXRpbmcgZGljdDoKICAgIGhwX2RpY3QgPSBqc29uLmxvYWQodG1wX2ZpbGUpCiAgICB0bXBfZmlsZS5jbG9zZSgpCiAgICAjIERlbGV0aW5nIGZpbGU6CiAgICBvcy5yZW1vdmUob3MucGF0aC5hYnNwYXRoKGYiLi97ZmlsZW5hbWV9IikpCgogICAgaWYgIm9iamVjdHMiIG5vdCBpbiBocF9kaWN0OgogICAgICAgICMgTm8gaHlwZXItcGFyYW1zCiAgICAgICAgcmV0dXJuIHt9CgogICAgIyBhZnRlciB0cmFpbmluZyB0aGVyZSBhcmUgdHdvIGh5cGVyLXBhcmFtZXRlcnMgZGljdHMgaW5zaWRlIHRoZSBydW4gb2JqZWN0OgogICAgYXNzZXJ0IGxlbihocF9kaWN0KSA9PSAyCiAgICByZXN1bHRfZGljdCA9IHt9CgogICAgIyBjcmVhdGluZyBoeXBlci1wYXJhbXMgZGljdCB3aXRoIGtleSBwcmVmaXhlcyBmb3IgZWFjaCBwYXJ0OgogICAgZm9yIGQsIG5hbWUgaW4gemlwKGhwX2RpY3RbIm9iamVjdHMiXSwgWyJkYXRhX3RyYW5zZm9ybSIsICJ0cmFpbiJdKToKICAgICAgICBmb3Iga2V5IGluIGQua2V5cygpOgogICAgICAgICAgICByZXN1bHRfZGljdFtmIntuYW1lfV97a2V5fSJdID0gZFtrZXldCgogICAgcmV0dXJuIHJlc3VsdF9kaWN0CgoKZGVmIHN1Ym1pdF90cmFpbmluZ19qb2IoCiAgICBjb250ZXh0OiBNTENsaWVudEN0eCwKICAgIGV4cGVyaW1lbnQ6IEV4cGVyaW1lbnQsCiAgICBjb21wdXRlX3RhcmdldDogQ29tcHV0ZVRhcmdldCwKICAgIHJlZ2lzdGVyX21vZGVsX25hbWU6IHN0ciwKICAgIHJlZ2lzdGVyZWRfZGF0YXNldF9uYW1lOiBzdHIsCiAgICBsYWJlbF9jb2x1bW5fbmFtZTogc3RyLAogICAgYXV0b21sX3NldHRpbmdzOiBzdHIsCiAgICB0cmFpbmluZ19zZXQ6IERhdGFJdGVtLAogICAgd29ya3NwYWNlOiBXb3Jrc3BhY2UgPSBOb25lLAogICAgc2F2ZV9uX21vZGVsczogaW50ID0gMywKICAgIHNob3dfb3V0cHV0OiBib29sID0gVHJ1ZSwKKSAtPiBOb25lOgogICAgIiIiCiAgICBTdWJtaXQgdHJhaW5pbmcgam9iIHRvIEF6dXJlIEF1dG9NTCBhbmQgZG93bmxvYWQgdHJhaW5lZCBtb2RlbAogICAgd2hlbiBjb21wbGV0ZWQuIFVzZXMgcHJldmlvdXNseSByZWdpc3RlcmVkIGRhdGFzZXQgZm9yIHRyYWluaW5nLgoKICAgIDpwYXJhbSBjb250ZXh0OiAgICAgICAgICAgICAgICAgTUxSdW4gY29udGV4dC4KICAgIDpwYXJhbSB3b3Jrc3BhY2U6ICAgICAgICAgICAgICAgQXp1cmUgd29ya3NwYWNlLgogICAgOnBhcmFtIGV4cGVyaW1lbnQ6ICAgICAgICAgICAgICBBenVyZSBleHBlcmltZW50LgogICAgOnBhcmFtIGNvbXB1dGVfdGFyZ2V0OiAgICAgICAgICBBenVyZSBjb21wdXRlIHRhcmdldC4KICAgIDpwYXJhbSByZWdpc3Rlcl9tb2RlbF9uYW1lOiAgICAgTmFtZSBvZiBtb2RlbCB0byByZWdpc3RlciBpbiBBenVyZS4KICAgIDpwYXJhbSByZWdpc3RlcmVkX2RhdGFzZXRfbmFtZTogTmFtZSBvZiBkYXRhc2V0IHJlZ2lzdGVyZWQgaW4gQXp1cmUgTUwuCiAgICA6cGFyYW0gbGFiZWxfY29sdW1uX25hbWU6ICAgICAgIE5hbWUgb2YgdGFyZ2V0IGNvbHVtbiBpbiBkYXRhc2V0LgogICAgOnBhcmFtIGF1dG9tbF9zZXR0aW5nczogICAgICAgICBKU09OIHN0cmluZyBvZiBhbGwgQXp1cmUgQXV0b01MIHNldHRpbmdzLgogICAgOnBhcmFtIHRyYWluaW5nX3NldDogICAgICAgICAgICBUcmFpbmluZyBzZXQgdG8gbG9nIHdpdGggbW9kZWwuIEZvciBtb2RlbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb25pdG9yaW5nIGludGVncmF0aW9uLgogICAgOnBhcmFtIHNob3dfb3V0cHV0OiAgICAgICAgICAgICBEaXNwbGF5aW5nIEF6dXJlIGxvZ3MuCiAgICA6cGFyYW0gc2F2ZV9uX21vZGVsczogICAgICAgICAgIEhvdyBtYW55IG9mIHRoZSB0b3AgcGVyZm9ybWluZyBtb2RlbHMgdG8gbG9nLgogICAgIiIiCiAgICAjIExvYWRpbmcgd29ya3NwYWNlIGlmIG5vdCBwcm92aWRlZDoKICAgIGlmIG5vdCB3b3Jrc3BhY2U6CiAgICAgICAgd29ya3NwYWNlID0gX2xvYWRfd29ya3NwYWNlKGNvbnRleHQpCgogICAgIyBTZXR1cCBleHBlcmltZW50OgogICAgY29udGV4dC5sb2dnZXIuaW5mbygiU2V0dGluZyB1cCBleHBlcmltZW50IHBhcmFtZXRlcnMiKQogICAgZGF0YXNldCA9IERhdGFzZXQuZ2V0X2J5X25hbWUod29ya3NwYWNlLCBuYW1lPXJlZ2lzdGVyZWRfZGF0YXNldF9uYW1lKQogICAgYXV0b21sX3NldHRpbmdzID0ganNvbi5sb2FkcyhhdXRvbWxfc2V0dGluZ3MpCiAgICBhdXRvbWxfY29uZmlnID0gQXV0b01MQ29uZmlnKAogICAgICAgIGNvbXB1dGVfdGFyZ2V0PWNvbXB1dGVfdGFyZ2V0LAogICAgICAgIHRyYWluaW5nX2RhdGE9ZGF0YXNldCwKICAgICAgICB2ZXJib3NpdHk9bG9nZ2luZy5JTkZPLAogICAgICAgIGxhYmVsX2NvbHVtbl9uYW1lPWxhYmVsX2NvbHVtbl9uYW1lLAogICAgICAgICoqYXV0b21sX3NldHRpbmdzLAogICAgKQoKICAgICMgUnVuIGV4cGVyaW1lbnQgb24gQXp1cmVNTDoKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oIlN1Ym1pdHRpbmcgYW5kIHJ1bm5pbmcgZXhwZXJpbWVudCIpCiAgICByZW1vdGVfcnVuID0gZXhwZXJpbWVudC5zdWJtaXQoYXV0b21sX2NvbmZpZykKICAgIHJlbW90ZV9ydW4ud2FpdF9mb3JfY29tcGxldGlvbihzaG93X291dHB1dD1zaG93X291dHB1dCkKCiAgICAjIEdldCB0b3AgTiBydW5zIHRvIGxvZzoKICAgIHRvcF9ydW5zID0gX2dldF90b3Bfbl9ydW5zKAogICAgICAgIHJlbW90ZV9ydW49cmVtb3RlX3J1biwKICAgICAgICBuPXNhdmVfbl9tb2RlbHMsCiAgICAgICAgcHJpbWFyeV9tZXRyaWM9YXV0b21sX3NldHRpbmdzWyJwcmltYXJ5X21ldHJpYyJdLAogICAgKQoKICAgICMgR2V0IHRyYWluaW5nIHNldCB0byBsb2cgd2l0aCBtb2RlbDoKICAgIHRyYWluaW5nX3NldCA9IHRyYWluaW5nX3NldC5hc19kZigpLmRyb3AobGFiZWxfY29sdW1uX25hbWUsIGF4aXM9MSkKCiAgICAjIFJlZ2lzdGVyLCBkb3dubG9hZCwgYW5kIGxvZyBtb2RlbHM6CiAgICBmb3IgaSwgcnVuIGluIGVudW1lcmF0ZSh0b3BfcnVucyk6CiAgICAgICAgIyBSZWdpc3RlciBtb2RlbDoKICAgICAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCJSZWdpc3RlcmluZyBtb2RlbCIpCiAgICAgICAgbW9kZWwgPSBydW4ucmVnaXN0ZXJfbW9kZWwoCiAgICAgICAgICAgIG1vZGVsX25hbWU9cmVnaXN0ZXJfbW9kZWxfbmFtZSwgbW9kZWxfcGF0aD0ib3V0cHV0cy9tb2RlbC5wa2wiCiAgICAgICAgKQogICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oCiAgICAgICAgICAgIGYiUmVnaXN0ZXJlZCBtb2RlbCB3aXRoIG5hbWUgJ3ttb2RlbC5uYW1lfScsIGlkICd7bW9kZWwuaWR9JywgdmVyc2lvbiAne21vZGVsLnZlcnNpb259JyIKICAgICAgICApCgogICAgICAgICMgRG93bmxvYWQgbW9kZWwgbG9jYWxseToKICAgICAgICBkb3dubG9hZF9tb2RlbCgKICAgICAgICAgICAgY29udGV4dD1jb250ZXh0LAogICAgICAgICAgICB3b3Jrc3BhY2U9d29ya3NwYWNlLAogICAgICAgICAgICBtb2RlbF9uYW1lPXJlZ2lzdGVyX21vZGVsX25hbWUsCiAgICAgICAgICAgIG1vZGVsX3ZlcnNpb249bW9kZWwudmVyc2lvbiwKICAgICAgICAgICAgdGFyZ2V0X2Rpcj1mIi4ve21vZGVsLnZlcnNpb259IiwKICAgICAgICApCgogICAgICAgICMgTG9nIG1vZGVsIG1ldHJpY3M6CiAgICAgICAgbWV0cmljcyA9IHJ1bi5nZXRfbWV0cmljcygpCiAgICAgICAgZGVsIG1ldHJpY3NbImNvbmZ1c2lvbl9tYXRyaXgiXQogICAgICAgIGRlbCBtZXRyaWNzWyJhY2N1cmFjeV90YWJsZSJdCgogICAgICAgICMgQ29sbGVjdCBtb2RlbCBoeXBlci1wYXJhbWV0ZXJzOgogICAgICAgIG1vZGVsX2hwX2RpY3QgPSBfZ2V0X21vZGVsX2hwKHJ1bikKICAgICAgICB3aXRoIGNvbnRleHQuZ2V0X2NoaWxkX2NvbnRleHQoKiptb2RlbF9ocF9kaWN0KSBhcyBjaGlsZDoKICAgICAgICAgICAgaWYgaSA9PSAwOgogICAgICAgICAgICAgICAgY2hpbGQubWFya19hc19iZXN0KCkKICAgICAgICAgICAgY2hpbGQubG9nX3Jlc3VsdCgpCgogICAgICAgICMgTG9nIG1vZGVsOgogICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oIkxvZ2dpbmcgbW9kZWwgdG8gTUxSdW4iKQogICAgICAgIGNvbnRleHQubG9nX21vZGVsKAogICAgICAgICAgICBmIm1vZGVsX3tpfSIsCiAgICAgICAgICAgIGFydGlmYWN0X3BhdGg9Y29udGV4dC5hcnRpZmFjdF9zdWJwYXRoKGYie21vZGVsLnZlcnNpb259IiksCiAgICAgICAgICAgIG1ldHJpY3M9bWV0cmljcywKICAgICAgICAgICAgbW9kZWxfZmlsZT1mInttb2RlbC52ZXJzaW9ufS9tb2RlbC5wa2wiLAogICAgICAgICAgICB0cmFpbmluZ19zZXQ9dHJhaW5pbmdfc2V0LAogICAgICAgICkKCgpkZWYgYXV0b21sX3RyYWluKAogICAgIyBNbFJ1bgogICAgY29udGV4dDogTUxDbGllbnRDdHgsCiAgICB0cmFpbmluZ19kYXRhX3VyaTogRGF0YUl0ZW0sCiAgICAjIEluaXQgZXhwZXJpbWVudCBhbmQgY29tcHV0ZQogICAgZXhwZXJpbWVudF9uYW1lOiBzdHIgPSAiIiwKICAgIGNwdV9jbHVzdGVyX25hbWU6IHN0ciA9ICIiLAogICAgdm1fc2l6ZTogc3RyID0gIlNUQU5EQVJEX0QyX1YyIiwKICAgIG1heF9ub2RlczogaW50ID0gMSwKICAgICMgUmVnaXN0ZXIgZGF0YXNldAogICAgZGF0YXNldF9uYW1lOiBzdHIgPSAiIiwKICAgIGRhdGFzZXRfZGVzY3JpcHRpb246IHN0ciA9ICIiLAogICAgZmVhdHVyZV92ZWN0b3JfZW50aXR5PSIiLAogICAgZHJvcF9jb2x1bW5zOiBsaXN0ID0gTm9uZSwKICAgIGNyZWF0ZV9uZXdfdmVyc2lvbjogYm9vbCA9IEZhbHNlLAogICAgbGFiZWxfY29sdW1uX25hbWU6IHN0ciA9ICIiLAogICAgIyBTdWJtaXQgdHJhaW5pbmcgam9iCiAgICByZWdpc3Rlcl9tb2RlbF9uYW1lOiBzdHIgPSAiIiwKICAgIHNhdmVfbl9tb2RlbHM6IGludCA9IDMsCiAgICBsb2dfYXp1cmU6IGJvb2wgPSBUcnVlLAogICAgYXV0b21sX3NldHRpbmdzOiBzdHIgPSBOb25lLAopIC0+IE5vbmU6CiAgICAiIiIKICAgIFdob2xlIHRyYWluaW5nIGZsb3cgZm9yIEF6dXJlIEF1dG9NTC4gUmVnaXN0ZXJzIGRhdGFzZXQvZmVhdHVyZSB2ZWN0b3IsCiAgICBzdWJtaXRzIHRyYWluaW5nIGpvYiB0byBBenVyZSBBdXRvTUwsIGFuZCBkb3dubG9hZHMgdHJhaW5lZCBtb2RlbAogICAgd2hlbiBjb21wbGV0ZWQuCgogICAgOnBhcmFtIGNvbnRleHQ6ICAgICAgICAgICAgICAgTUxSdW4gY29udGV4dC4KCiAgICA6cGFyYW0gZXhwZXJpbWVudF9uYW1lOiAgICAgICBOYW1lIG9mIGV4cGVyaW1lbnQgdG8gY3JlYXRlIGluIEF6dXJlIE1MLgogICAgOnBhcmFtIGNwdV9jbHVzdGVyX25hbWU6ICAgICAgTmFtZSBvZiBBenVyZSBNTCBjb21wdXRlIHRhcmdldC4gQ3JlYXRlZCBpZiBkb2VzIG5vdCBleGlzdC4KICAgIDpwYXJhbSB2bV9zaXplOiAgICAgICAgICAgICAgIEF6dXJlIG1hY2hpbmUgdHlwZSBmb3IgY29tcHV0ZSB0YXJnZXQuCiAgICA6cGFyYW0gbWF4X25vZGVzOiAgICAgICAgICAgICBNYXhpbXVtIG51bWJlciBvZiBjb25jdXJyZW50IGNvbXB1dGUgdGFyZ2V0cy4KCiAgICA6cGFyYW0gZGF0YXNldF9uYW1lOiAgICAgICAgICBOYW1lIG9mIEF6dXJlIGRhdGFzZXQgdG8gcmVnaXN0ZXIuCiAgICA6cGFyYW0gZGF0YXNldF9kZXNjcmlwdGlvbjogICBEZXNjcmlwdGlvbiBvZiBBenVyZSBkYXRhc2V0IHRvIHJlZ2lzdGVyLgogICAgOnBhcmFtIGZlYXR1cmVfdmVjdG9yX2VudGl0eTogRW50aXR5IChwcmltYXJ5IGtleSkgb2YgZmVhdHVyZSB2ZWN0b3IuIERyb3BwZWQgd2hlbiByZWdpc3RlcmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldCBpbiBBenVyZS4KICAgIDpwYXJhbSB0cmFpbmluZ19kYXRhX3VyaTogICAgIElndWF6aW8gRmVhdHVyZVZlY3RvciBvciBkYXRhc2V0IFVSSSB0byB1cGxvYWQuIFdpbGwgZHJvcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggYmVmb3JlIHVwbG9hZGluZyB3aGVuIGl0IGlzIGEgRmVhdHVyZVZlY3Rvci4KICAgIDpwYXJhbSBkcm9wX2NvbHVtbnM6ICAgICAgICAgIExpc3Qgb2YgY29sdW1ucyB0byBkcm9wIGZyb20gdXBsb2FkZWQgZGF0YXNldC4gRGVmYXVsdHMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVfdmVjdG9yX2VudGl0eS4KICAgIDpwYXJhbSBjcmVhdGVfbmV3X3ZlcnNpb246ICAgIFJlZ2lzdGVyIEF6dXJlIGRhdGFzZXQgYXMgbmV3IHZlcnNpb24uIE11c3QgYmUgdXNlZCB3aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZnlpbmcgZGF0YXNldCBzY2hlbWEuCiAgICA6cGFyYW0gbGFiZWxfY29sdW1uX25hbWU6ICAgICBUYXJnZXQgY29sdW1uIGluIGRhdGFzZXQuCgogICAgOnBhcmFtIHJlZ2lzdGVyX21vZGVsX25hbWU6ICAgTmFtZSBvZiBtb2RlbCB0byByZWdpc3RlciBpbiBBenVyZS4KICAgIDpwYXJhbSBzYXZlX25fbW9kZWxzOiAgICAgICAgIEhvdyBtYW55IG9mIHRoZSB0b3AgcGVyZm9ybWluZyBtb2RlbHMgdG8gbG9nLgogICAgOnBhcmFtIGxvZ19henVyZTogICAgICAgICAgICAgRGlzcGxheWluZyBBenVyZSBsb2dzLgogICAgOnBhcmFtIGF1dG9tbF9zZXR0aW5nczogICAgICAgSlNPTiBzdHJpbmcgb2YgYWxsIEF6dXJlIEF1dG9NTCBzZXR0aW5ncy4KICAgICIiIgogICAgaWYgbm90IGF1dG9tbF9zZXR0aW5nczoKICAgICAgICBhdXRvbWxfc2V0dGluZ3MgPSBqc29uLmR1bXBzKAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGFzayI6ICJjbGFzc2lmaWNhdGlvbiIsCiAgICAgICAgICAgICAgICAiZGVidWdfbG9nIjogImF1dG9tbF9lcnJvcnMubG9nIiwKICAgICAgICAgICAgICAgICMgImV4cGVyaW1lbnRfZXhpdF9zY29yZSI6IDAuOSwKICAgICAgICAgICAgICAgICJlbmFibGVfZWFybHlfc3RvcHBpbmciOiBGYWxzZSwKICAgICAgICAgICAgICAgICJhbGxvd2VkX21vZGVscyI6IFsiTG9naXN0aWNSZWdyZXNzaW9uIiwgIlNHRCIsICJTVk0iXSwKICAgICAgICAgICAgICAgICJpdGVyYXRpb25zIjogMiwKICAgICAgICAgICAgICAgICJpdGVyYXRpb25fdGltZW91dF9taW51dGVzIjogMiwKICAgICAgICAgICAgICAgICJtYXhfY29uY3VycmVudF9pdGVyYXRpb25zIjogMiwKICAgICAgICAgICAgICAgICJtYXhfY29yZXNfcGVyX2l0ZXJhdGlvbiI6IC0xLAogICAgICAgICAgICAgICAgIm5fY3Jvc3NfdmFsaWRhdGlvbnMiOiA1LAogICAgICAgICAgICAgICAgInByaW1hcnlfbWV0cmljIjogImFjY3VyYWN5IiwKICAgICAgICAgICAgICAgICJmZWF0dXJpemF0aW9uIjogIm9mZiIsCiAgICAgICAgICAgICAgICAibW9kZWxfZXhwbGFpbmFiaWxpdHkiOiBGYWxzZSwKICAgICAgICAgICAgICAgICJlbmFibGVfdm90aW5nX2Vuc2VtYmxlIjogRmFsc2UsCiAgICAgICAgICAgICAgICAiZW5hYmxlX3N0YWNrX2Vuc2VtYmxlIjogRmFsc2UsCiAgICAgICAgICAgIH0KICAgICAgICApCgogICAgIyBJbml0IGV4cGVyaW1lbnQgYW5kIGNvbXB1dGUKICAgIHdvcmtzcGFjZSwgZXhwZXJpbWVudCA9IGluaXRfZXhwZXJpbWVudCgKICAgICAgICBjb250ZXh0PWNvbnRleHQsIGV4cGVyaW1lbnRfbmFtZT1leHBlcmltZW50X25hbWUKICAgICkKCiAgICBjb21wdXRlX3RhcmdldCA9IGluaXRfY29tcHV0ZSgKICAgICAgICBjb250ZXh0PWNvbnRleHQsCiAgICAgICAgd29ya3NwYWNlPXdvcmtzcGFjZSwKICAgICAgICBjcHVfY2x1c3Rlcl9uYW1lPWNwdV9jbHVzdGVyX25hbWUsCiAgICAgICAgdm1fc2l6ZT12bV9zaXplLAogICAgICAgIG1heF9ub2Rlcz1tYXhfbm9kZXMsCiAgICApCgogICAgIyBSZWdpc3RlciBkYXRhc2V0CiAgICB0cmFpbmluZ19zZXQgPSByZWdpc3Rlcl9kYXRhc2V0KAogICAgICAgIGNvbnRleHQ9Y29udGV4dCwKICAgICAgICB3b3Jrc3BhY2U9d29ya3NwYWNlLAogICAgICAgIGRhdGFzZXRfbmFtZT1kYXRhc2V0X25hbWUsCiAgICAgICAgZGF0YXNldF9kZXNjcmlwdGlvbj1kYXRhc2V0X2Rlc2NyaXB0aW9uLAogICAgICAgIGRhdGE9dHJhaW5pbmdfZGF0YV91cmksCiAgICAgICAgZHJvcF9jb2x1bW5zPWRyb3BfY29sdW1ucyBvciBbZmVhdHVyZV92ZWN0b3JfZW50aXR5XSwKICAgICAgICBjcmVhdGVfbmV3X3ZlcnNpb249Y3JlYXRlX25ld192ZXJzaW9uLAogICAgKQoKICAgICMgU3VibWl0IHRyYWluaW5nIGpvYgogICAgc3VibWl0X3RyYWluaW5nX2pvYigKICAgICAgICBjb250ZXh0LAogICAgICAgIHdvcmtzcGFjZT13b3Jrc3BhY2UsCiAgICAgICAgZXhwZXJpbWVudD1leHBlcmltZW50LAogICAgICAgIGNvbXB1dGVfdGFyZ2V0PWNvbXB1dGVfdGFyZ2V0LAogICAgICAgIHJlZ2lzdGVyX21vZGVsX25hbWU9cmVnaXN0ZXJfbW9kZWxfbmFtZSwKICAgICAgICByZWdpc3RlcmVkX2RhdGFzZXRfbmFtZT1kYXRhc2V0X25hbWUsCiAgICAgICAgbGFiZWxfY29sdW1uX25hbWU9bGFiZWxfY29sdW1uX25hbWUsCiAgICAgICAgYXV0b21sX3NldHRpbmdzPWF1dG9tbF9zZXR0aW5ncywKICAgICAgICB0cmFpbmluZ19zZXQ9dHJhaW5pbmdfc2V0LAogICAgICAgIHNob3dfb3V0cHV0PWxvZ19henVyZSwKICAgICAgICBzYXZlX25fbW9kZWxzPXNhdmVfbl9tb2RlbHMsCiAgICApCg==
    commands: []
    code_origin: https://github.com/mlrun/functions.git#97ea3a13a6aec6a7f47bfb286ebdbe4d425fa38a:C:\Users\yonatans\projects\functions\azureml_utils\azureml_utils.py
    origin_filename: C:\Users\yonatans\projects\functions\azureml_utils\azureml_utils.py
  disable_auto_mount: false
  priority_class_name: ''
  affinity: null
verbose: false
