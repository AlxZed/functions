kind: job
metadata:
  name: model-monitoring-batch
  tag: ''
  hash: 512ca7d734948601630b3bd15f8bbff6955ac74b
  project: default
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  env: []
  default_handler: handler
  entry_points:
    compute:
      name: compute
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: capping
        default: null
      - name: kld_scaling
        default: 0.0001
      outputs:
      - default: ''
        type: float
      lineno: 66
    yaml_to_histogram:
      name: yaml_to_histogram
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: histogram_yaml
        default: ''
      outputs:
      - default: ''
      lineno: 115
    compute_metrics_over_df:
      name: compute_metrics_over_df
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: base_histogram
        default: ''
      - name: latest_histogram
        default: ''
      outputs:
      - default: ''
      lineno: 132
    compute_drift_from_histograms:
      name: compute_drift_from_histograms
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: base_histogram_yaml
        default: ''
      - name: latest_histogram_yaml
        default: ''
      outputs:
      - default: ''
      lineno: 143
    parquet_to_stats:
      name: parquet_to_stats
      doc: ''
      parameters:
      - name: parquet_path
        type: Path
        default: ''
      outputs:
      - default: ''
      lineno: 207
    run:
      name: run
      doc: ''
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
      lineno: 234
    get_last_created_dir:
      name: get_last_created_dir
      doc: ''
      parameters:
      - name: endpoint_dir
        default: ''
      - name: fs
        default: ''
      outputs:
      - default: ''
      lineno: 314
    handler:
      name: handler
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      - name: project
        type: str
        default: ''
      outputs:
      - default: ''
      lineno: 322
  description: ''
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/Michaelliv/functions.git#9cda955bf5539c44d4b2601ca9df3dff2de40ce3:model_monitoring_batch.py
  affinity: null
verbose: false
